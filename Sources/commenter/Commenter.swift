public struct Commenter {

    public let owner: String
    public let repo: String
    public let token: String
    public let issue: Int
    public let id: String?
    public let comment: String

    public func execute() throws {

        let github = GitHubCommentInteractor(owner: owner, repo: repo, token: token)

        let metadata: String

        if let id = id {
            metadata = "data-meta=\"commenter-id-\(id)\""
        } else {
            metadata = "data-meta=\"commenter-id\""
        }

        let comments = try github.comments(for: issue).compactMap { (comment) -> Int? in
            guard
                let id = comment["id"] as? Int,
                let body = comment["body"] as? String,
                body.contains(metadata)
                else { return nil }
            return id
        }

        let body = """
            \(comment)\n
            <blockquote \(metadata)>
                Generated by <a href="https://github.com/chrisfuller/commenter">Commenter</a> :writing_hand:
            </blockquote>
            """

        if comments.isEmpty {
            try github.comment(on: issue, body: body)
        } else {
            try comments.forEach { try github.update(comment: $0, body: body) }
        }
    }
}
